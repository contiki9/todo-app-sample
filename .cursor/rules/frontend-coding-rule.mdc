---
description: 
globs: 
alwaysApply: true
---
以下は、フロントエンドの開発において、機能ごとに整理されたコンポーネントやロジックを管理するためのベストプラクティスを反映しています。

### 1. **ディレクトリ構造の基本方針**
- **機能ごとの分割**: 各機能は独立したディレクトリに分割され、その中にコンポーネント、フック、操作（mutation/query）、バリデーション、ルーティングなどを含む。
- **責務の分離**: UI層（表示）とロジック層（データ取得・処理）を明確に分離し、コンポーネントをシンプルに保つ。
- **共通化可能な処理の抽出**: 複数の機能で利用される共通処理は、`components`,`hooks`,`utils`にいずれかのディレクトリに配置し、再利用性を高める。
- **集約モジュール**: Barrelの方式を使用し、`components/`,`hooks/`,`utils/`,`features`のディレクトリ直下に`index.ts`を配置して`export`を集約させてください。

### 2. **ディレクトリ構成の詳細**
#### 2.1. **機能ディレクトリ**
- **`features/foo/{NewFeature}`**: 管理者向けの{NewFeature}機能を提供するディレクトリ。
  - **`components`**: 機能固有のUIコンポーネントを配置。
    - **`Header`**: ヘッダー関連のコンポーネント（例: `Header.tsx`, `HeaderBreadcrumb.tsx`）。
    - **`Modal`**: モーダル関連のコンポーネント（例: `ArchiveNewFeatureModal.tsx`）。
  - **`domain`**: ドメインロジックを配置。
    - **`*.ts`**: バリデーションやビジネスロジックを実装。
    - **`*.spec.ts`**: バリデーションやロジックのテストを実装。
- **`pages/{foo}/index.tsx`**: ファイルシステムベースのルーティングに用います。ブラウザから指定されたURLとディレクトリ名が一致します。

#### 2.2. **共通ディレクトリ**
- **`components`**: 共通UIコンポーネント（例: `Table.tsx`, `Alert.tsx`）。
- **`hooks`**: 共通フック（例: `useSelectedItemIds.ts`）。
- **`utils`**: ユーティリティ関数（例: `breadcrumb.ts`, `path.ts`）。


### 3. **命名規則**
- **ディレクトリ名**: 機能や役割が明確に分かる命名（例: `NewFeatureListItemPage`, `Header`）。
- **ファイル名**: 処理や役割が分かる命名（例: `useTitleForm.ts`, `NewFeatureListItemsTable.tsx`）。
- **コンポーネント名**: パーツ名を先頭に配置（例: `HeaderBreadcrumb`, `NewFeatureDropdown`）。
– **変数名**:補助動詞を用いた説明的な変数名を使用する（例：`isLoading`,`hasError`）。
- **Interface**:変数名の頭にはIをつける。

### 4. **テストと品質管理**
- **テストの範囲**: 主要なシナリオを網羅し、ハッピーパスを中心にテストを実施。
- **バリデーション**: zodのスキーマを別ファイルで管理し、必ずspecを作成。
- **Storybook**: コンポーネントのストーリーを作成し、UIの動作を確認。動的な確認が必要な場合はplay関数を利用してInteractionテストを作成する。
- **ライブラリ**:テストはVitestとTesting-Libraryを使用してください。
  - **禁止**:テストはJestを使用してはいけません。
- **動作確認**:ファイルを変更した場合は`npm run test`を実行してちゃんと通るか確認をしてから報告してください。
- **ディレクトリ**:テストはテストファイルと同じディレクトリに配置してください。
  - **禁止**:_TEST_以下のディレクトリは作成しないこと。

### 5. **ルーティング**
- **ルーティングファイル**: `pages` ディレクトリに配置し、React Routerを使用してルーティングを管理。
- **ルートコンポーネント**: `index.tsx` をエントリーポイントとして使用し、モジュールのカプセル化を実現。

### 6. **GraphQLクエリ/ミューテーション**
- **操作の分離**: `operations` ディレクトリにMutationとQueryを分けて配置。
- **型定義**: GraphQLの型定義は `@generated/api` からインポートし、型安全性を確保。

### 7. **エラーハンドリング**
- **エラーメッセージ**: ユーザーに表示するエラーメッセージは、`constants` ディレクトリに定義。
- **エラーハンドリング**: GraphQLのエラーハンドリングは、`operations` ディレクトリ内で実施。

### 8. **状態管理**
- **ローカルステート**: コンポーネント内での状態管理は `useState` や `useReducer` を使用。
- **グローバルステート**: 必要に応じて`Zustand`を使用。

### 9. **ドキュメント**
- **README**: 各ディレクトリにREADMEを配置し、機能や使用方法を記載。
- **コメント**: コード内に適切なコメントを記載し、可読性を向上。

この構成は、機能ごとに整理されたコードベースを維持し、開発者が効率的に作業を進めるためのガイドラインとして活用できます。

## 10. **Components**
– **コンポーネント**:コンポーネントとスタイリングにはTailwindを使用する。
– **レスポンシブ**:Tailwind CSSを用いてレスポンシブデザインを実装し、モバイルファーストアプローチを取る。
- **Variants**:Tailwind CSSのスタイリングはtailwind-variantsを使用する。
- **Headless UI**:`radix-ui`を使用してください。 Stylingは`tremor`を参考にして拡張してください。
- **アイコン**:アイコンはRemix-iconから選んで使ってください。
- **Storybook**:`components/*/**`、`features/components/*/**`に配置されたコンポーネントにはStorybookを作成してください。
  -  ファイルを変更した場合、テストが成功しているか確認するために`test-runner`を使用して確認してください。

## 11. **TypeScript**
– すべてのコードにTypeScriptを使用し、型よりインターフェースを優先する。
– TypeScriptインターフェースを使用した関数型コンポーネントを使用する。
– コンポーネントはクラスではなく関数で実装する。
- 関数にはJSDocのDiscriptionで使えるコメントをつける。
- 関数の中のコメントが必要な箇所はなぜそのような処理をしているのかをコメントする。
- tsconfig.jsonの設定では@エイリアスを禁止する。



